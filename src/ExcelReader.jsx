import React, { useState, useEffect } from 'react';
import 'bootstrap-icons/font/bootstrap-icons.css';
import * as XLSX from 'xlsx';
import { Container, Row, Col, Card, Table, Button, Alert, Form, Badge } from 'react-bootstrap';
import ScheduleView from './ScheduleView';

export default function ExcelReader() {
  const [data, setData] = useState([]);
  const [fileName, setFileName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showFileSection, setShowFileSection] = useState(true);
  const [isRestoredData, setIsRestoredData] = useState(false);

  // Kh√≥a l∆∞u tr·ªØ trong localStorage
  const STORAGE_KEY = 'scheduleData';
  const FILENAME_KEY = 'scheduleFileName';
  const UPLOAD_DATE_KEY = 'scheduleUploadDate';

  // L∆∞u d·ªØ li·ªáu v√†o localStorage
  const saveToLocalStorage = (scheduleData, filename) => {
    try {
      const dataToSave = {
        data: scheduleData,
        fileName: filename,
        uploadDate: new Date().toISOString()
      };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
      console.log('ƒê√£ l∆∞u d·ªØ li·ªáu v√†o localStorage');
    } catch (error) {
      console.error('L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
    }
  };

  // Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ localStorage
  const loadFromLocalStorage = () => {
    try {
      const savedData = localStorage.getItem(STORAGE_KEY);
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setData(parsedData.data || []);
        setFileName(parsedData.fileName || '');
        setIsRestoredData(true);
        // T·ª± ƒë·ªông thu g·ªçn n·∫øu c√≥ d·ªØ li·ªáu c≈©
        if (parsedData.data && parsedData.data.length > 0) {
          setShowFileSection(false);
        }
        return true;
      }
    } catch (error) {
      console.error('L·ªói khi kh√¥i ph·ª•c d·ªØ li·ªáu:', error);
    }
    return false;
  };

  // L·∫•y th√¥ng tin th·ªùi gian l∆∞u
  const getSavedDataInfo = () => {
    try {
      const savedData = localStorage.getItem(STORAGE_KEY);
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        if (parsedData.uploadDate) {
          const uploadDate = new Date(parsedData.uploadDate);
          return uploadDate.toLocaleString('vi-VN');
        }
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin th·ªùi gian:', error);
    }
    return null;
  };

  // X√≥a d·ªØ li·ªáu t·ª´ localStorage
  const clearLocalStorage = () => {
    try {
      localStorage.removeItem(STORAGE_KEY);
      console.log('ƒê√£ x√≥a d·ªØ li·ªáu kh·ªèi localStorage');
    } catch (error) {
      console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error);
    }
  };

  // Kh√¥i ph·ª•c d·ªØ li·ªáu khi component mount
  useEffect(() => {
    loadFromLocalStorage();
  }, []);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    
    if (!file) return;

    setLoading(true);
    setError('');
    setFileName(file.name);
    setIsRestoredData(false); // Reset tr·∫°ng th√°i kh√¥i ph·ª•c khi upload file m·ªõi

    const reader = new FileReader();
    reader.readAsBinaryString(file);

    reader.onload = (e) => {
      try {
        const binaryStr = e.target.result;
        const workbook = XLSX.read(binaryStr, { type: 'binary' });

        // L·∫•y sheet ƒë·∫ßu ti√™n
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];

        // Chuy·ªÉn sheet th√†nh JSON
        const jsonData = XLSX.utils.sheet_to_json(sheet);
        // console.log(jsonData);
        setData(jsonData);
        setLoading(false);
        
        // L∆∞u d·ªØ li·ªáu v√†o localStorage
        saveToLocalStorage(jsonData, file.name);
        
        // T·ª± ƒë·ªông thu g·ªçn sau khi upload th√†nh c√¥ng
        setShowFileSection(false);
      } catch (error) {
        console.error('Error reading Excel file:', error);
        setError('C√≥ l·ªói khi ƒë·ªçc file Excel. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.');
        setLoading(false);
      }
    };

    reader.onerror = () => {
      setError('C√≥ l·ªói khi ƒë·ªçc file.');
      setLoading(false);
    };
  };

  const clearData = () => {
    setData([]);
    setFileName('');
    setError('');
    setShowFileSection(true); // M·ªü r·ªông l·∫°i ph·∫ßn ch·ªçn file
    clearLocalStorage(); // X√≥a d·ªØ li·ªáu kh·ªèi localStorage
  };

  

  return (
    <Container className="mt-4">
      <Row>
        <Col>
          <Card>
            <Card.Header className="bg-danger text-white">
              <div className="d-flex justify-content-between align-items-center">
                <h3 className="mb-0">
                  <span className="d-none d-sm-inline">üìö H·ªá Th·ªëng Xem Th·ªùi Kh√≥a Bi·ªÉu</span>
                  <span className="d-sm-none">üìö Th·ªùi Kh√≥a Bi·ªÉu</span>
                </h3>
                <Button 
                  variant="outline-light" 
                  size="sm"
                  onClick={() => setShowFileSection(!showFileSection)}
                >
                  {showFileSection ? <i className="bi bi-chevron-up"></i> : <i className="bi bi-chevron-down"></i>}
                </Button>
              </div>
            </Card.Header>
            {showFileSection && (
              <Card.Body>
                <Form>
                  <Form.Group className="mb-3">
                    <Form.Label>
                      <strong>üìÅ Ch·ªçn file Excel th·ªùi kh√≥a bi·ªÉu:</strong>
                    </Form.Label>
                    <Form.Control
                      type="file"
                      accept=".xlsx, .xls"
                      onChange={handleFileUpload}
                      disabled={loading}
                    />
                    <Form.Text className="text-muted">
                      H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: .xlsx, .xls
                    </Form.Text>
                  </Form.Group>

                  {isRestoredData && data.length > 0 && (
                    <Alert variant="primary">
                      <div className="d-flex align-items-center justify-content-between flex-wrap">
                        <div className="flex-grow-1">
                          <strong>üíæ D·ªØ li·ªáu ƒë√£ kh√¥i ph·ª•c:</strong> ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ l·∫ßn truy c·∫≠p tr∆∞·ªõc
                          {getSavedDataInfo() && (
                            <small className="d-block text-muted mt-1">
                              L∆∞u l√∫c: {getSavedDataInfo()}
                            </small>
                          )}
                        </div>
                        <Button 
                          variant="outline-primary" 
                          size="sm"
                          onClick={() => setShowFileSection(true)}
                          className="flex-shrink-0 ms-2"
                        >
                          üìÇ Upload m·ªõi
                        </Button>
                      </div>
                    </Alert>
                  )}

                  {fileName && !isRestoredData && (
                    <Alert variant="info">
                      <strong>File ƒë√£ ch·ªçn:</strong> {fileName}
                    </Alert>
                  )}

                  {loading && (
                    <Alert variant="warning">
                      <div className="d-flex align-items-center">
                        <div className="spinner-border spinner-border-sm me-2" role="status">
                          <span className="visually-hidden">Loading...</span>
                        </div>
                        ƒêang x·ª≠ l√Ω file...
                      </div>
                    </Alert>
                  )}

                  {error && (
                    <Alert variant="danger">
                      <strong>L·ªói:</strong> {error}
                    </Alert>
                  )}

                  {data.length > 0 && (
                    <div className="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center gap-2">
                      <Alert variant="success" className="flex-grow-1 mb-0">
                        <strong>Th√†nh c√¥ng!</strong> 
                        <span className="d-none d-sm-inline"> ƒê√£ t·∫£i {data.length} b·∫£n ghi t·ª´ file Excel.</span>
                        <span className="d-sm-none"> {data.length} b·∫£n ghi</span>
                      </Alert>
                      <Button variant="outline-danger" onClick={clearData} className="flex-shrink-0">
                        <span className="d-none d-sm-inline">üóëÔ∏è X√≥a d·ªØ li·ªáu</span>
                        <span className="d-sm-none">üóëÔ∏è X√≥a</span>
                      </Button>
                    </div>
                  )}
                </Form>
              </Card.Body>
            )}
            
            {/* Hi·ªÉn th·ªã th√¥ng tin t√≥m t·∫Øt khi thu g·ªçn */}
            {!showFileSection && data.length > 0 && (
              <Card.Body className="py-2 file-section-collapsed">
                <div className="d-flex justify-content-between align-items-center flex-wrap">
                  <div className="d-flex align-items-center flex-grow-1 me-2">
                    <Badge bg={isRestoredData ? "primary" : "success"} className="me-2">
                      {isRestoredData ? "üíæ" : "‚úì"}
                    </Badge>
                    <small className="text-truncate">
                      <strong className="d-none d-sm-inline">{fileName}</strong>
                      <span className="d-sm-none">{fileName.substring(0, 20)}...</span>
                      <span className="text-muted"> - {data.length} b·∫£n ghi</span>
                      {isRestoredData && (
                        <span className="text-primary d-none d-sm-inline"> (ƒê√£ l∆∞u)</span>
                      )}
                    </small>
                  </div>
                  <div className="d-flex gap-1">
                    {isRestoredData && (
                      <Button 
                        variant="outline-primary" 
                        size="sm" 
                        onClick={() => setShowFileSection(true)}
                        className="flex-shrink-0"
                      >
                        <span className="d-none d-sm-inline">üìÇ Upload m·ªõi</span>
                        <span className="d-sm-none">üìÇ</span>
                      </Button>
                    )}
                    <Button variant="outline-danger" size="sm" onClick={clearData} className="flex-shrink-0">
                      <span className="d-none d-sm-inline">üóëÔ∏è X√≥a</span>
                      <span className="d-sm-none">üóëÔ∏è</span>
                    </Button>
                  </div>
                </div>
              </Card.Body>
            )}
          </Card>
        </Col>
      </Row>
      <ScheduleView data={data} />
    </Container>
  );
}
