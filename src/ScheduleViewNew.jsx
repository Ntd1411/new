import React, { useState, useMemo } from 'react';
import { Card, Table, Badge, Row, Col, Modal, Button } from 'react-bootstrap';

const ScheduleView = ({ data }) => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // H√†m ƒë·ªÉ t·∫°o m√†u cho c√°c m√¥n h·ªçc kh√°c nhau
  const getSubjectColor = (subject, index) => {
    const colors = ['primary', 'success', 'danger', 'warning', 'info', 'secondary'];
    return colors[index % colors.length];
  };

  // H√†m chuy·ªÉn ƒë·ªïi t√™n th·ª© sang s·ªë
  const getDayOfWeekNumber = (dayName) => {
    const dayMap = {
      'ch·ªß nh·∫≠t': 0, 'cn': 0,
      'th·ª© hai': 1, 'th·ª© 2': 1, 't2': 1,
      'th·ª© ba': 2, 'th·ª© 3': 2, 't3': 2,
      'th·ª© t∆∞': 3, 'th·ª© 4': 3, 't4': 3,
      'th·ª© nƒÉm': 4, 'th·ª© 5': 4, 't5': 4,
      'th·ª© s√°u': 5, 'th·ª© 6': 5, 't6': 5,
      'th·ª© b·∫£y': 6, 'th·ª© 7': 6, 't7': 6
    };
    return dayMap[dayName.toLowerCase()] ?? -1;
  };

  // Ph√¢n t√≠ch c·∫•u tr√∫c d·ªØ li·ªáu Excel
  const scheduleData = useMemo(() => {
    if (!data || data.length === 0) return { scheduleByDate: {}, subjects: [], subjectGroups: {} };

    const scheduleByDate = {};
    const subjects = new Set();
    const subjectGroups = {}; // Nh√≥m c√°c m√¥n h·ªçc theo m√£/t√™n

    data.forEach(row => {
      // T√¨m c·ªôt th·ªùi gian h·ªçc (c√≥ th·ªÉ ch·ª©a ƒë·ªãnh d·∫°ng ng√†y)
      const timeColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('th·ªùi gian') || 
        key.toLowerCase().includes('time') ||
        (row[key] && typeof row[key] === 'string' && row[key].includes('/'))
      );

      // T√¨m c·ªôt t√™n m√¥n h·ªçc
      const subjectColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('t√™n h·ªçc ph·∫ßn') ||
        key.toLowerCase().includes('m√¥n h·ªçc') ||
        key.toLowerCase().includes('h·ªçc ph·∫ßn')
      );

      // T√¨m c·ªôt m√£ h·ªçc ph·∫ßn
      const codeColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('m√£ h·ªçc ph·∫ßn') ||
        key.toLowerCase().includes('m√£ m√¥n')
      );

      // T√¨m c·ªôt ph√≤ng h·ªçc
      const roomColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('ph√≤ng') ||
        key.toLowerCase().includes('room')
      );

      // T√¨m c·ªôt ti·∫øt h·ªçc
      const periodColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('ti·∫øt') ||
        key.toLowerCase().includes('period')
      );

      // T√¨m c·ªôt gi·∫£ng vi√™n
      const teacherColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('cbgd') ||
        key.toLowerCase().includes('gi·∫£ng vi√™n') ||
        key.toLowerCase().includes('teacher')
      );

      // T√¨m c·ªôt th·ª© trong tu·∫ßn
      const dayOfWeekColumn = Object.keys(row).find(key => 
        key.toLowerCase().includes('th·ª©') ||
        key.toLowerCase().includes('ng√†y trong tu·∫ßn')
      );

      if (timeColumn && row[timeColumn]) {
        const timeString = row[timeColumn].toString();
        const subjectName = subjectColumn ? row[subjectColumn] : 'M√¥n h·ªçc';
        const subjectCode = codeColumn ? row[codeColumn] : '';
        const dayOfWeek = dayOfWeekColumn ? row[dayOfWeekColumn] : '';
        
        // T·∫°o key duy nh·∫•t cho m√¥n h·ªçc (k·∫øt h·ª£p m√£ v√† t√™n)
        const subjectKey = `${subjectCode}_${subjectName}`;
        
        // Nh√≥m c√°c kho·∫£ng th·ªùi gian c·ªßa c√πng m·ªôt m√¥n
        if (!subjectGroups[subjectKey]) {
          subjectGroups[subjectKey] = {
            code: subjectCode,
            name: subjectName,
            teacher: teacherColumn ? row[teacherColumn] : '',
            timePeriods: []
          };
        }

        // Ph√¢n t√≠ch chu·ªói th·ªùi gian c√≥ d·∫°ng "11/08/2025-31/08/2025"
        const dateRangeMatch = timeString.match(/(\d{1,2}\/\d{1,2}\/\d{4})-(\d{1,2}\/\d{1,2}\/\d{4})/);
        
        if (dateRangeMatch) {
          const startDate = dateRangeMatch[1];
          const endDate = dateRangeMatch[2];
          
          // Th√™m th√¥ng tin kho·∫£ng th·ªùi gian v√†o nh√≥m m√¥n h·ªçc
          subjectGroups[subjectKey].timePeriods.push({
            startDate,
            endDate,
            room: roomColumn ? row[roomColumn] : '',
            period: periodColumn ? row[periodColumn] : '',
            dayOfWeek: dayOfWeek,
            timeRange: timeString
          });
          
          // T·∫°o danh s√°ch c√°c ng√†y trong kho·∫£ng th·ªùi gian
          const start = new Date(startDate.split('/').reverse().join('-'));
          const end = new Date(endDate.split('/').reverse().join('-'));
          
          for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            // Ki·ªÉm tra th·ª© trong tu·∫ßn n·∫øu c√≥
            const currentDayOfWeek = d.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ...
            let shouldInclude = true;
            
            if (dayOfWeek) {
              const dayOfWeekNum = getDayOfWeekNumber(dayOfWeek);
              shouldInclude = currentDayOfWeek === dayOfWeekNum;
            }
            
            if (shouldInclude) {
              const dateKey = d.toLocaleDateString('vi-VN');
              
              if (!scheduleByDate[dateKey]) {
                scheduleByDate[dateKey] = [];
              }
              
              const scheduleItem = {
                subject: subjectName,
                code: subjectCode,
                room: roomColumn ? row[roomColumn] : '',
                period: periodColumn ? row[periodColumn] : '',
                teacher: teacherColumn ? row[teacherColumn] : '',
                dayOfWeek: dayOfWeek,
                timeRange: timeString,
                subjectKey: subjectKey,
                rawData: row
              };
              
              scheduleByDate[dateKey].push(scheduleItem);
            }
          }
          
          if (subjectName) {
            subjects.add(subjectName);
          }
        }
      }
    });

    return { scheduleByDate, subjects: Array.from(subjects), subjectGroups };
  }, [data]);

  // T·∫°o l·ªãch th√°ng
  const generateCalendar = () => {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    const firstDay = new Date(currentYear, currentMonth, 1);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    
    const calendar = [];
    const current = new Date(startDate);
    
    for (let week = 0; week < 6; week++) {
      const weekDays = [];
      for (let day = 0; day < 7; day++) {
        const dateKey = current.toLocaleDateString('vi-VN');
        const hasSchedule = scheduleData.scheduleByDate[dateKey] && 
                           scheduleData.scheduleByDate[dateKey].length > 0;
        const isCurrentMonth = current.getMonth() === currentMonth;
        const isToday = current.toDateString() === today.toDateString();
        
        weekDays.push({
          date: new Date(current),
          dateKey,
          hasSchedule,
          isCurrentMonth,
          isToday,
          dayNumber: current.getDate()
        });
        
        current.setDate(current.getDate() + 1);
      }
      calendar.push(weekDays);
    }
    
    return calendar;
  };

  if (!data || data.length === 0) return null;

  const calendar = generateCalendar();
  const monthNames = [
    'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
    'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'
  ];
  const today = new Date();

  const handleDateClick = (dateInfo) => {
    if (dateInfo.hasSchedule) {
      setSelectedDate(dateInfo);
      setShowModal(true);
    }
  };

  return (
    <>
      <Row className="mt-4">
        <Col>
          <Card>
            <Card.Header className="bg-primary text-white">
              <h5 className="mb-0">üìÖ {monthNames[today.getMonth()]} {today.getFullYear()}</h5>
            </Card.Header>
            <Card.Body className="p-0">
              <Table responsive className="calendar-table mb-0">
                <thead className="table-dark">
                  <tr>
                    <th className="text-center">Ch·ªß Nh·∫≠t</th>
                    <th className="text-center">Th·ª© Hai</th>
                    <th className="text-center">Th·ª© Ba</th>
                    <th className="text-center">Th·ª© T∆∞</th>
                    <th className="text-center">Th·ª© NƒÉm</th>
                    <th className="text-center">Th·ª© S√°u</th>
                    <th className="text-center">Th·ª© B·∫£y</th>
                  </tr>
                </thead>
                <tbody>
                  {calendar.map((week, weekIndex) => (
                    <tr key={weekIndex}>
                      {week.map((day, dayIndex) => (
                        <td 
                          key={dayIndex}
                          className={`calendar-day text-center p-3 position-relative ${
                            !day.isCurrentMonth ? 'text-muted bg-light' : ''
                          } ${day.isToday ? 'bg-warning bg-opacity-25' : ''} ${
                            day.hasSchedule ? 'calendar-day-has-schedule' : ''
                          }`}
                          style={{ 
                            height: '80px', 
                            cursor: day.hasSchedule ? 'pointer' : 'default',
                            borderRight: '1px solid #dee2e6',
                            borderBottom: '1px solid #dee2e6'
                          }}
                          onClick={() => handleDateClick(day)}
                        >
                          <div className="fw-bold">{day.dayNumber}</div>
                          {day.hasSchedule && (
                            <div className="position-absolute top-50 start-50 translate-middle">
                              <div 
                                className="bg-danger rounded-circle"
                                style={{ width: '8px', height: '8px', marginTop: '15px' }}
                              ></div>
                              <small className="text-primary fw-bold">
                                {Object.keys(
                                  scheduleData.scheduleByDate[day.dateKey].reduce((groups, item) => {
                                    groups[item.subjectKey] = true;
                                    return groups;
                                  }, {})
                                ).length} m√¥n
                              </small>
                            </div>
                          )}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </Table>
            </Card.Body>
            <Card.Footer className="text-muted">
              <div className="d-flex align-items-center justify-content-between">
                <div>
                  <span className="me-3">
                    <span className="bg-danger rounded-circle d-inline-block me-1" 
                          style={{ width: '8px', height: '8px' }}></span>
                    C√≥ l·ªãch h·ªçc
                  </span>
                  <span className="me-3">
                    <span className="bg-warning bg-opacity-25 d-inline-block me-1 border" 
                          style={{ width: '12px', height: '12px' }}></span>
                    H√¥m nay
                  </span>
                </div>
                <div>
                  <strong>T·ªïng: {Object.keys(scheduleData.subjectGroups).length} m√¥n h·ªçc</strong>
                </div>
              </div>
            </Card.Footer>
          </Card>
        </Col>
      </Row>

      {/* Modal hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·ªçc */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>
            üìÖ L·ªãch h·ªçc ng√†y {selectedDate?.dateKey}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedDate && scheduleData.scheduleByDate[selectedDate.dateKey] && (
            <div>
              {/* Nh√≥m c√°c m√¥n h·ªçc theo subjectKey */}
              {Object.values(
                scheduleData.scheduleByDate[selectedDate.dateKey].reduce((groups, item) => {
                  if (!groups[item.subjectKey]) {
                    groups[item.subjectKey] = {
                      subject: item.subject,
                      code: item.code,
                      teacher: item.teacher,
                      sessions: []
                    };
                  }
                  groups[item.subjectKey].sessions.push({
                    room: item.room,
                    period: item.period,
                    dayOfWeek: item.dayOfWeek,
                    timeRange: item.timeRange
                  });
                  return groups;
                }, {})
              ).map((groupedItem, index) => (
                <Card key={index} className="mb-3">
                  <Card.Body>
                    <Row>
                      <Col md={12}>
                        <h6 className="text-primary mb-2">
                          <Badge bg="primary" className="me-2">{groupedItem.code}</Badge>
                          {groupedItem.subject}
                        </h6>
                        {groupedItem.teacher && (
                          <p className="mb-2">
                            <strong>üë®‚Äçüè´ Gi·∫£ng vi√™n:</strong> {groupedItem.teacher}
                          </p>
                        )}
                        
                        {/* Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c bu·ªïi h·ªçc c·ªßa m√¥n n√†y */}
                        <div className="mt-2">
                          <strong>üìÖ C√°c bu·ªïi h·ªçc:</strong>
                          {groupedItem.sessions.map((session, sessionIndex) => (
                            <div key={sessionIndex} className="ms-3 mt-1 p-2 bg-light rounded">
                              <Row>
                                <Col md={6}>
                                  {session.room && (
                                    <div><strong>üè¢ Ph√≤ng:</strong> {session.room}</div>
                                  )}
                                  {session.period && (
                                    <div><strong>‚è∞ Ti·∫øt:</strong> {session.period}</div>
                                  )}
                                </Col>
                                <Col md={6}>
                                  {session.dayOfWeek && (
                                    <div><strong>üìÜ Th·ª©:</strong> {session.dayOfWeek}</div>
                                  )}
                                  {session.timeRange && (
                                    <div><strong>üìä Kho·∫£ng th·ªùi gian:</strong> 
                                      <small className="text-muted"> {session.timeRange}</small>
                                    </div>
                                  )}
                                </Col>
                              </Row>
                            </div>
                          ))}
                        </div>
                      </Col>
                      <Col md={12} className="text-end mt-2">
                        <Badge bg={getSubjectColor(groupedItem.subject, index)} className="me-1">
                          {groupedItem.sessions.length} bu·ªïi h·ªçc
                        </Badge>
                        <Badge bg="secondary">
                          M√¥n #{index + 1}
                        </Badge>
                      </Col>
                    </Row>
                  </Card.Body>
                </Card>
              ))}
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            ƒê√≥ng
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Th·ªëng k√™ t·ªïng quan */}
      <Row className="mt-4">
        <Col>
          <Card>
            <Card.Header className="bg-info text-white">
              <h5 className="mb-0">üìä Th·ªëng K√™ Th·ªùi Kh√≥a Bi·ªÉu</h5>
            </Card.Header>
            <Card.Body>
              <Row>
                <Col md={6}>
                  <h6>üìà T·ªïng quan</h6>
                  <ul className="list-unstyled">
                    <li><Badge bg="primary">T·ªïng s·ªë b·∫£n ghi:</Badge> <strong>{data.length}</strong></li>
                    <li><Badge bg="success">S·ªë m√¥n h·ªçc:</Badge> <strong>{Object.keys(scheduleData.subjectGroups).length}</strong></li>
                    <li><Badge bg="warning">S·ªë ng√†y c√≥ l·ªãch:</Badge> <strong>{Object.keys(scheduleData.scheduleByDate).length}</strong></li>
                    <li><Badge bg="info">T·ªïng kho·∫£ng th·ªùi gian:</Badge> <strong>
                      {Object.values(scheduleData.subjectGroups).reduce((total, group) => total + group.timePeriods.length, 0)}
                    </strong></li>
                  </ul>
                </Col>
                <Col md={6}>
                  <h6>üìö Danh s√°ch m√¥n h·ªçc</h6>
                  <div>
                    {Object.values(scheduleData.subjectGroups).slice(0, 6).map((group, index) => (
                      <div key={index} className="mb-2">
                        <Badge 
                          bg={getSubjectColor(group.name, index)} 
                          className="me-2"
                        >
                          {group.code}
                        </Badge>
                        <span className="me-2">{group.name}</span>
                        <Badge bg="secondary" className="ms-1">
                          {group.timePeriods.length} kho·∫£ng TG
                        </Badge>
                      </div>
                    ))}
                    {Object.keys(scheduleData.subjectGroups).length > 6 && (
                      <Badge bg="secondary">+{Object.keys(scheduleData.subjectGroups).length - 6} m√¥n kh√°c</Badge>
                    )}
                  </div>
                </Col>
              </Row>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </>
  );
};

export default ScheduleView;
